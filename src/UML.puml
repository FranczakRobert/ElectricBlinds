@startuml
left to right direction
skinparam linetype ortho

package "MCAL" <<Folder>> #DDDDDD{

    struct MotorStatus <<struct>> #mintcream {
        +status: uint8_t (2 bits)
        +direction: uint8_t (2 bits)
    }

    package "Abstract" <<Folder>> #line.bold {

        abstract class Driver #palegreen {
            #DriverManager* driverManager
            +TAG: const char*
            +Driver()
            +~Driver()
            +{abstract}start():ErrorCode <<virtual>>
            +{abstract}stop():ErrorCode <<virtual>>
            +{abstract}init():ErrorCode <<virtual>>
            +{abstract}deinit():ErrorCode <<virtual>>
            +{abstract}getData(DataSignals):DataSignalsResponse <<virtual>>
            +{abstract}setData(DataSignals SIGNAL, uint16_t count, ...):ErrorCode <<virtual>>
        }

        abstract class Thread #palegreen {
            #isRunning: bool
            #mutex: pthread_mutex_t
            #ptid: pthread_t
            +startThread(component: const char*, driver: Driver*, funcPtr(void*), maxStackSize: bool = false):ErrorCode
            +stopThread(component: const char*):ErrorCode
        }
    }

    class ESP32Server #lightblue {
        +ESP32Server()
        +~ESP32Server()
        +{abstract}start():ErrorCode <<override>>
        +{abstract}stop():ErrorCode <<override>>
        +{abstract}init():ErrorCode <<override>>
        +{abstract}deinit():ErrorCode <<override>>
        +{abstract}getData(DataSignals):DataSignalsResponse <<override>>
        +{abstract}setData(DataSignals SIGNAL, uint16_t count, ...):ErrorCode <<override>>
        +setManager(DriverManager*):ErrorCode
        +{static} GetInstance():ESP32Server&
        +ESP32Server(ESP32Server &other) = delete
        +operator=(const ESP32Server &) = delete:void 
        #{static} handleRoot():void
        #{static} handleMotorPost():void
        #{static} handleBlindsTimerPost():void
        #{static} setRandLTimers():void
        #{static} handleReset():void
        #{static} handleMax():void
        #{static} handleMin():void
        #{static} run(void* args):void*
        -driverManager: DriverManager*
        -{static} server: WebServer
        -{static} loweringTimeVal: String
        -{static} raisingTimeVal: String
        -{static} max: String
        -{static} timeValMutex: pthread_mutex_t
    }

    class LedDriver #lightblue {
        -ledState: uint8_t
        +LedDriver()
        +~LedDriver()
        +start():ErrorCode <<override>>
        +stop():ErrorCode <<override>>
        -init():ErrorCode <<override>>
        -deinit():ErrorCode <<override>>
        +getData(DataSignals):DataSignalsResponse <<override>>
        +setData(DataSignals SIGNAL, uint16_t count, ...):ErrorCode <<override>>
        -blinkSystem(uint32_t time, bool isActive = false):void
        #{static} run(void* args):void*
    }

    class NEMA17Driver #lightblue {
        +NEMA17Driver(driverManager: DriverManager*)
        +~NEMA17Driver()
        +{abstract}start():ErrorCode <<override>>
        +{abstract}stop():ErrorCode <<override>>
        +{abstract}getData(DataSignals SIGNAL):DataSignalsResponse <<override>>
        +{abstract}setData(DataSignals SIGNAL, uint16_t count, ...):ErrorCode <<override>>
        -motorHigh():ErrorCode
        -motorLow():ErrorCode
        -saveMotorStatus():ErrorCode
        -{abstract}init():ErrorCode <<override>>
        -{abstract}deinit():ErrorCode <<override>>
        #{static} run(void* args):void*
        -const IN1: uint8_t
        -const IN2: uint8_t
        -const IN3: uint8_t
        -const IN4: uint8_t
        -const stepper: uint16_t
        -position_MAX: uint32_t
        -position_MIN: uint32_t
        -myStepper: Stepper
        -motor_state: MotorStatus
        -{static} position: int
    }

    class WifiDriver #lightblue {
        +WifiDriver(driverManager: DriverManager*)
        +~WifiDriver()
        +{abstract}start():ErrorCode <<override>>
        +{abstract}stop():ErrorCode <<override>>
        +{abstract}getData(DataSignals SIGNAL):DataSignalsResponse <<override>>
        +{abstract}setData(DataSignals SIGNAL, uint16_t count, ...):ErrorCode <<override>>
        -{abstract}init():ErrorCode <<override>>
        -{abstract}deinit():ErrorCode <<override>>
        -getBlindsDataByAP():ErrorCode
        #{static} run(void* args):void*
        -wifiStats: WifiStatsU
        -wifiData: WifiDataS
    }

    struct WifiData #mintcream {
        +ssid: String
        +psswd: String
    }

    struct WifiStats #mintcream {
        +state: u8_t
    }
}

package "Utils" <<Folder>> #DDDDDD{

    package "ENUMS" <<Folder>> #FFF9C4 {

        enum Drivers {
            D_LED
            D_SCHEDULER
            D_WIFI
            D_NEMA17
        }

        enum DataSignals {
            S_GET_WIFI_STATUS
            S_TRIGGER_RESET
            S_SET_WIFI_LED_OFF
            S_SET_LED_STATE_CONFIG_MODE
            S_SET_LED_STATE_BOOT_MODE
            S_SET_LED_STATE_ACTIVE_MODE
            S_SET_NEMA_UP_STATUS
            S_SET_NEMA_DOWN_STATUS
            S_SET_NEMA_HOLD_STATUS
            S_SET_NEMA_RELEASE_STATUS
            S_SET_NEMA_WORKING_TIME
            S_SET_NEMA_MAX
            S_SET_NEMA_MIN
            S_TRIGGER_NEMA_LOWERING
            S_TRIGGER_NEM_RAISING
            S_SCHEDULER_FETCH_DATA
            S_SCHEDULER_SET_NEMA_LOW_TIME
            S_SCHEDULER_SET_NEMA_UP_TIME
        }

        enum DataSignalsResponse {
            S_WIFI_CONNECTED
            S_WIFI_NOT_CONNECTED
            S_WIFI_CONFIG_MODE
        }

        enum ErrorCode {
            E_OK
            E_NOT_OK
        }
    }

    class NvmMemory {
        -NvmMemory()
        -NvmMemory(const NvmMemory&) = delete
        -operator=(const NvmMemory&) = delete : NvmMemory&
        -pref: Preferences
        +static getInstance(): NvmMemory&
        +writeToNvm(namespaceName: const char*, key: const char*, value: const char*): void
        +readFromNvm(namespaceName: const char*, key: const char*): String
    }
}

package "Basic" <<Folder>> #DDDDDD    {

    class DriverManager {
        +DriverManager()
        +~DriverManager()
        +startAllDrivers() : ErrorCode
        +stopAllDrivers() : ErrorCode
        +initAllDrivers() : ErrorCode
        +deinitAllDrivers() : ErrorCode
        +setDriverData(driver: Drivers, signal: DataSignals) : ErrorCode
        +setDriverData(driver: Drivers, signal: DataSignals, count: u16_t, ...) : ErrorCode

        - wifiDriver: WifiDriver
        - ledDriver:LedDriver
        - stepperDriver:NEMA17Driver
        - scheduler: Scheduler
        -drivers_array[]: Driver*
    }

    class Scheduler {
        +Scheduler(DriverManager)
        +~Scheduler()
        +{abstract}start():ErrorCode <<override>>
        +{abstract}stop():ErrorCode <<override>>
        +{abstract}init():ErrorCode <<override>>
        +{abstract}deinit():ErrorCode <<override>>
        +{abstract}getData(DataSignals):DataSignalsResponse <<override>>
        +{abstract}setData(DataSignals SIGNAL, uint16_t count, ...):ErrorCode <<override>>
        -fetchData : bool
        -clock[] : uint32_t
        -NEMAWorkingTime[][] : uint32_t
        -driverManager : DriverManager*
        -fetchHour() : ErrorCode
        -setTimeClock(result: uint32_t*, time: String) : void
        static #run(args: void*) : void
    }

}

' Inheritance relationships
MCAL.WifiDriver -|> MCAL.Abstract.Driver
MCAL.WifiDriver -|> MCAL.Abstract.Thread

MCAL.NEMA17Driver -|> MCAL.Abstract.Driver
MCAL.NEMA17Driver -|> MCAL.Abstract.Thread

MCAL.ESP32Server -|> MCAL.Abstract.Driver
MCAL.ESP32Server -|> MCAL.Abstract.Thread

MCAL.LedDriver -|> MCAL.Abstract.Driver
MCAL.LedDriver -|> MCAL.Abstract.Thread

Basic.Scheduler -|> MCAL.Abstract.Driver
Basic.Scheduler -|> MCAL.Abstract.Thread

' Usage relationships
MCAL.WifiDriver --> MCAL.WifiStats
MCAL.WifiDriver --> MCAL.WifiData
MCAL.WifiDriver --> Utils.NvmMemory

MCAL.NEMA17Driver --> MCAL.MotorStatus
MCAL.NEMA17Driver --> Utils.NvmMemory

MCAL.ESP32Server --> Utils.NvmMemory

Basic.DriverManager --> MCAL.ESP32Server
Basic.DriverManager --> MCAL.LedDriver
Basic.DriverManager --> MCAL.WifiDriver
Basic.DriverManager --> MCAL.NEMA17Driver
Basic.DriverManager --> Basic.Scheduler

MCAL.Abstract.Driver --> Utils.ENUMS.Drivers
MCAL.Abstract.Driver --> Utils.ENUMS.DataSignals
MCAL.Abstract.Driver --> Utils.ENUMS.DataSignalsResponse

Basic.Scheduler --> Utils.ENUMS.ErrorCode
Basic.Scheduler --> Utils.NvmMemory
@enduml